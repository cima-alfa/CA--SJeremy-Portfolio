---
import { Picture } from 'astro:assets';
import { FaExternalLinkAlt } from 'react-icons/fa';

const { title, featured } = Astro.props;

import { getCurrentLocale } from '@/i18n.mjs';

const currentLocale = getCurrentLocale(Astro);

const timelineCollection = await Astro.glob('@/content/timeline/*/*.mdx');

const timeline = timelineCollection.reverse().filter((entry: any) => {
	if (entry.file.search(new RegExp('/src/content/timeline/' + currentLocale + '/.*.mdx$')) === -1) {
		return false;
	}

	if (featured === true && entry.frontmatter.featured !== true) {
		return false;
	}

	return true;
}).map((entry: any) => {
	let data = entry.frontmatter;

	data.image = entry.image;

	return {
		data: data,
		Content: entry.Content
	};
});
---

<section class="row content-text padding-500" role="contentinfo" aria-label={ title }>
	<div class="col timeline-title text-center">
		<h2>{ title }</h2>
	</div>
	<div class="col">
		<div class="timeline">
			{ timeline.map(({ data, Content }) => (
				<div class="timeline--item" data-timeline-date={ data.date }>
					<div class="timeline--content">
						<h3>{ data.title }</h3>

						<Content />

						{ (data.technologies || data.link) &&
						<hr />
						<ul>
							{ data.technologies && <li><span>{ data.technologies }</span></li>}	
							{ data.link && <li><span><a href={ data.link } target="_blank" rel="nofollow" title={ data.title }>{ data.linkDisplay } <FaExternalLinkAlt /></a></span></li> }
						</ul>
						}
					</div>
					{ data.image && <Picture src={ data.image } formats={['avif', 'webp']} alt={ data.title } width="950" class="timeline--image" /> }
				</div>
			)) }
		</div>
	</div>
</section>

<style lang="scss">
	.timeline-title {
		margin-bottom: var(--spacer-200);
	}

	.timeline {
		position: relative;

		display: grid;
		row-gap: var(--spacer-600);

		padding-block: var(--spacer-400);

		&::before {
			content: '';

			grid-row: 1 / span -1;
			grid-column: 1 / -1;

			position: absolute;
			
			top: 0;
			left: 50%;
			transform: translateX(-50%);

			width: 2px;
			height: 100%;
			background-color: currentColor;
		}
	}

	.timeline--content {
		grid-row: 1 / -1;
		grid-column: 1 / 2;

		hr {
			margin: .7em 0;

			& + * {
				margin-top: 0;
			}
		}
	}

	.timeline--image {
		grid-row: 1 / -1;
		grid-column: 2 / 3;

		margin: 0 !important;

		border: 2px solid currentColor;
		border-radius: .5rem;
		box-shadow: var(--box-shadow-bottom);
	}

	.timeline--item {
		position: relative;

		display: grid;
		grid-template-columns: 1fr 1fr;
		align-items: center;
		column-gap: var(--spacer-400);

		&::before {
			content: '';

			position: absolute;
			top: 50%;
			left: 50%;
			transform: translate(-50%, -50%);

			width: 1.25rem;
			height: 1.25rem;
			background-color: currentColor;
			border-radius: 50%;

			z-index: 3;
		}

		&::after {
			content: attr(data-timeline-date);

			position: absolute;
			top: 50%;
			left: 50%;
			transform: translateY(-50%);

			padding: 6px 12px;
			padding-left: var(--spacer-200);

			font-weight: var(--font-weight-bold);
			font-size: 1.1rem;
			color: var(--color-font-secondary);
			line-height: 1;

			background-color: var(--color-font-primary);
			border-top-right-radius: 100vh;
			border-bottom-right-radius: 100vh;

			box-shadow: var(--box-shadow-right);

			z-index: 2;
		}

		&:nth-child(2n) {
			& .timeline--image {
				grid-column: 1 / 2;
			}

			& .timeline--content {
				grid-column: 2 / 3;
			}

			&::after {
				left: auto;
				right: 50%;

				padding: 6px 12px;
				padding-right: var(--spacer-200);

				border-top-left-radius: 100vh;
				border-bottom-left-radius: 100vh;
				border-top-right-radius: 0;
				border-bottom-right-radius: 0;

				box-shadow: var(--box-shadow-left);
			}
		}
	}

	a svg {
		width: .7em;
		height: .7em;
		margin-left: 5px;
	}
</style>