---
import { getCurrentLocale, translate } from '@/i18n.mjs';

import Form from './Controls/Form.astro';
import Input from './Controls/Input.astro';
import InputInline from './Controls/InputInline.astro';
import TextArea from './Controls/TextArea.astro';
import Submit from './Controls/Submit.astro';

import { getCollection } from 'astro:content';
import { render } from 'astro:content';

const currentLocale = getCurrentLocale(Astro);

const entry = await getCollection('forms', ({ id }: { id: any }) => {
  	return id.startsWith(currentLocale + '/contact/legaltext');
});

const { Content } = await render(entry[0]);
---

<Form action="contact" method="post" novalidate id="contact-form" disabled>
	<div class="row">
		<div class="col medium-6">
			<Input type="text" name="name" label={ translate(currentLocale, 'name')} />
		</div>
		<div class="col medium-6">
			<Input type="text" name="surname" label={ translate(currentLocale, 'surname')} />
		</div>
		<div class="col medium-6">
			<Input type="email" name="email" label={ translate(currentLocale, 'email')} />
		</div>
		<div class="col">
			<TextArea name="message" label={ translate(currentLocale, 'message')}></TextArea>
		</div>
		<div class="col">
			<Content />
			<InputInline type="checkbox" name="legal" label={ translate(currentLocale, 'accept')} />
		</div>
		<div class="col justify-right">
			<Submit label={ translate(currentLocale, 'sendMessage') } />
		</div>
	</div>
</Form>

<script>
	const currentLocale = document.querySelector('html')?.getAttribute('lang') ?? 'en';

	{
		type Entries<T> = {
			[K in keyof T]: [key: K, value: T[K]];
		}[keyof T][];

		const form: HTMLFormElement|null = document.querySelector('#contact-form');

		form?.addEventListener('submit', async event => {
			event.preventDefault();

			const formData = new FormData(form);

			try {
				const response = await fetch('https://portfolio.sjeremy.dev/contact/', {
					method: 'POST',
					body: formData,
					headers: new Headers({"x-portfolio-lang": currentLocale})
				});

				const result = await response.json();

				processForm(form, result);
			} catch (e) {
				console.error(e);
			}
		});

		function processForm(form: HTMLFormElement, result: any) {
			form.querySelectorAll('.info-message').forEach(error => {
				error.remove();
			});

			form.querySelectorAll('[data-error]').forEach(error => {
				error.removeAttribute('data-error');
			});

			if (result.status === 1) {
				const message = document.createElement('p');
				
				message.classList.add('bg-success', 'info-message');
				message.textContent = result.message;

				form.prepend(message);
				form.reset();
			}

			if (result.status === -1) {
				setTimeout(() => {
					result.formErrors.forEach((error: string) => {
						const message = document.createElement('p');
					
						message.classList.add('bg-alert', 'info-message');
						message.textContent = error;

						form.prepend(message);
					});
					
					for (const [input, errors] of Object.entries(result.inputErrors) as Entries<typeof result.inputErrors>) {
						if (errors.length >= 1) {
							const formInput = form.querySelector(`[name="${input}"]`);
							
							formInput?.parentElement?.setAttribute('data-error', errors.join("\n\n"));
						}
					}
				}, 100);
			}
		}
	}
</script>