---
import { DiHtml5, DiCss3, DiSass, DiJavascript, DiPhp } from "react-icons/di";
import { SiAstro, SiNette, SiPlesk } from 'react-icons/si';
import { BsFiletypeSql } from "react-icons/bs";
---

<div class="skills-showcase">
	<div class="skill">
		<div class="skill-icon">
			<DiHtml5 size="64" title="HTML 5" role="img" />
		</div>
		<strong>HTML 5</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<DiCss3 size="64" title="CSS 3" role="img" />
		</div>
		<strong>CSS 3</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<DiJavascript size="64" title="JavaScript" role="img" />
		</div>
		<strong>JavaScript</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<SiAstro size="52" title="Astro JS" role="img" />
		</div>
		<strong>Astro JS</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<DiSass size="64" title="SASS | SCSS" role="img" />
		</div>
		<strong>SASS | SCSS</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<DiPhp size="64" title="PHP" role="img" />
		</div>
		<strong>PHP</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<SiNette size="64" title="Nette" role="img" />
		</div>
		<strong>Nette</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<SiPlesk size="64" title="Plesk Linux" role="img" />
		</div>
		<strong>Plesk Linux</strong>
	</div>
	<div class="skill">
		<div class="skill-icon">
			<BsFiletypeSql size="52" title="MySQL" role="img" />
		</div>
		<strong>MySQL</strong>
	</div>
</div>

<script>
	const skills = document.querySelectorAll('.skills-showcase .skill');
	let animated: any = [];
	let animationPlaying = 0;
	let animationElapsedTime = 0;

	const skillObserver = new IntersectionObserver((entries) => {
		let intersected = entries.filter(entry => entry.isIntersecting);
		
		intersected.forEach((entry) => {
			animated.push(entry);

			const animationDelay = (entry.target as HTMLElement).style.getPropertyValue('--__animation-duration').match(new RegExp('([\-\.0-9]+)([a-zA-Z])'));
			const animationDelayNumber: number = animationDelay ? parseInt(animationDelay[1] ?? '150') : 150;
			const animationDelayUnit: string = animationDelay ? animationDelay[2] ?? 'ms' : 'ms';

			(entry.target as HTMLElement).style.setProperty('--__animation-delay', ((animationDelayNumber - animationElapsedTime) * (animationPlaying + 1) * .9) + animationDelayUnit);

			entry.target.setAttribute('data-skill-animate', 'true');

			animationPlaying++;

			entry.target.addEventListener('animationend', (event) => {
				console.log(event);
				animationPlaying--;
			}, { once: true });

			skillObserver.unobserve(entry.target);
		});

		if (animated.filter((entry: any) => entry.isIntersecting).length === skills.length) {
			skillObserver.disconnect();
		}
	}, {
		root: null,
		rootMargin: (document.querySelector('.layout-header')?.clientHeight ?? 0) * -1 + 'px 0px',
		threshold: 1.0
	});

	skills.forEach((skill) => {
		skillObserver.observe(skill);
	});
</script>

<style lang="scss">
	@keyframes skills-showcase-show {
		0% {
			transform: translateY(100%);
			opacity: 0;
		}

		25% {
			opacity: 0;
		}

		100% {
			transform: translateY(0%);
			opacity: 1;
		}
	}

	.skills-showcase {
		display: flex;
		justify-content: center;
		flex-wrap: wrap;
		gap: var(--spacer-200) var(--spacer-500);

		.skill {
			--__animation-duration: 150ms;
			--__animation-delay: var(--__animation-duration);

			display: grid;
			justify-items: center;
			row-gap: 5px;
			transform: translateY(0%);
			opacity: 0;

			.skill-icon {
				display: grid;
				align-content: center;
				height: 64px;

				transition: transform 100ms ease-in-out;

				filter: drop-shadow(0 0 4px hsl(0 0% 0% / 0.25));
			}

			strong {
				height: min-content;
				white-space: nowrap;

				font-size: .9rem;

				cursor: default;
			}

			&:hover {
				.skill-icon {
					transform: scale(1.2);
					transition-timing-function: cubic-bezier(0,0,.5,2.5);
				}
			}

			&[data-skill-animate="true"] {
				animation: skills-showcase-show	var(--__animation-duration) cubic-bezier(.5,0,.5,1.25) var(--__animation-delay) forwards;
			}
		}

	}
</style>